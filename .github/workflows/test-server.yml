name: Server Test Suite

on:
  pull_request:
    branches:
      - main
      - nsc/v2

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          use-cache: 'true'
      - name: Start minikube
        uses: medyagh/setup-minikube@latest
      - name: Build Firecrawl image
        run: docker build -t firecrawl/firecrawl:latest . && minikube image load firecrawl/firecrawl:latest
        working-directory: ./apps/api
      - name: Build Postgres image
        run: docker build -t firecrawl/nuq-postgres:latest -f .github/k8s/nuq-postgres/Dockerfile . && minikube image load firecrawl/nuq-postgres:latest
      - name: Build Tailscale proxy image
        run: docker build -t firecrawl/tailscale-proxy:latest .github/k8s/tailscale-proxy && minikube image load firecrawl/tailscale-proxy:latest
      - name: Create Tailscale secret
        run: |
          kubectl create secret generic tailscale \
            --from-literal=TS_AUTHKEY=$(tailscale authkey --reusable --ephemeral) \
            --from-literal=FIRE_ENGINE_BETA_URL=${{ secrets.FIRE_ENGINE_BETA_URL }}
      - name: Create configmap
        run: |
          kubectl create configmap firecrawl-config-dynamic -n default \
            --from-literal=USE_DB_AUTHENTICATION=true \
            --from-literal=BULL_AUTH_KEY=${{ secrets.BULL_AUTH_KEY }} \
            --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --from-literal=SUPABASE_ANON_TOKEN=${{ secrets.SUPABASE_ANON_TOKEN }} \
            --from-literal=SUPABASE_SERVICE_TOKEN=${{ secrets.SUPABASE_SERVICE_TOKEN }} \
            --from-literal=SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
            --from-literal=SUPABASE_REPLICA_URL=${{ secrets.SUPABASE_REPLICA_URL }} \
            --from-literal=INDEX_SUPABASE_SERVICE_TOKEN=${{ secrets.INDEX_SUPABASE_SERVICE_TOKEN }} \
            --from-literal=INDEX_SUPABASE_ANON_TOKEN=${{ secrets.INDEX_SUPABASE_ANON_TOKEN }} \
            --from-literal=INDEX_SUPABASE_URL=${{ secrets.INDEX_SUPABASE_URL }} \
            --from-literal=FIRE_ENGINE_BETA_URL=http://tailscale-proxy:8080 \
            --from-literal=SERPER_API_KEY=${{ secrets.SERPER_API_KEY }} \
            --from-literal=RUNPOD_MU_POD_ID=${{ secrets.RUNPOD_MU_POD_ID }} \
            --from-literal=RUNPOD_MUV2_POD_ID=${{ secrets.RUNPOD_MUV2_POD_ID }} \
            --from-literal=RUNPOD_MU_API_KEY=${{ secrets.RUNPOD_MU_API_KEY }} \
            --from-literal=GCS_CREDENTIALS=${{ secrets.GCS_CREDENTIALS }} \
            --from-literal=GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }} \
            --from-literal=GCS_INDEX_BUCKET_NAME=${{ secrets.GCS_INDEX_BUCKET_NAME }} \
            --from-literal=GOOGLE_GENERATIVE_AI_API_KEY=${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }} \
            --from-literal=GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} \
            --from-literal=ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
            --from-literal=VERTEX_CREDENTIALS=${{ secrets.VERTEX_CREDENTIALS }} \
            --from-literal=IDMUX_URL=${{ secrets.IDMUX_URL }} \
            --from-literal=LOG_ENCRYPTION_KEY=${{ secrets.LOG_ENCRYPTION_KEY }}
      - name: Deploy server
        run: kubectl apply -f .github/k8s/server.yml
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: './apps/api/pnpm-lock.yaml'
      - name: Install dependencies
        run: pnpm install
        working-directory: ./apps/api
      - name: Wait for API
        run: kubectl wait --for=condition=ready pod -l app=firecrawl-app --timeout=60s
      - name: Run snippet tests
        run: |
          TEST_API_URL=$(minikube service firecrawl-app --url) pnpm run test:snips
        working-directory: ./apps/api
      - name: Kill instances
        if: always()
        run: pkill -9 node
      - name: Create logs directory
        if: always()
        run: mkdir -p logs
      - name: Copy log files
        if: always()
        run: |
          kubectl logs firecrawl-app > logs/api.log || true
          kubectl logs firecrawl-worker > logs/worker.log || true
          kubectl logs firecrawl-index-worker > logs/index-worker.log || true
          kubectl logs firecrawl-dragonfly > logs/dragonfly.log || true
          kubectl logs nuq-postgres > logs/postgres.log || true
      - name: Zip and encrypt logs
        if: always()
        run: |
          cd logs
          zip -r logs.zip ./*
          echo "${{ secrets.LOG_ENCRYPTION_KEY }}" | gpg --batch --yes --passphrase-fd 0 -c logs.zip
          rm logs.zip
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Encrypted Logs
          path: logs/logs.zip.gpg
          retention-days: 5